<?php

namespace DoctrineORMModule\Proxy\__CG__\Taxonomy\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class TermTaxonomy extends \Taxonomy\Entity\TermTaxonomy implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'id', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'term', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'taxonomy', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'description', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'parent', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'count', 'createUser', 'createDate', 'modifyUser', 'modifyDate', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'level');
        }

        return array('__isInitialized__', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'id', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'term', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'taxonomy', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'description', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'parent', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'count', 'createUser', 'createDate', 'modifyUser', 'modifyDate', '' . "\0" . 'Taxonomy\\Entity\\TermTaxonomy' . "\0" . 'level');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (TermTaxonomy $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function onPrePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onPrePersist', array());

        return parent::onPrePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function onPreUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onPreUpdate', array());

        return parent::onPreUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTerm($term)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTerm', array($term));

        return parent::setTerm($term);
    }

    /**
     * {@inheritDoc}
     */
    public function getTerm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTerm', array());

        return parent::getTerm();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxonomy($taxonomy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxonomy', array($taxonomy));

        return parent::setTaxonomy($taxonomy);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxonomy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxonomy', array());

        return parent::getTaxonomy();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', array($parent));

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', array());

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setCount($count)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCount', array($count));

        return parent::setCount($count);
    }

    /**
     * {@inheritDoc}
     */
    public function getCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCount', array());

        return parent::getCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setLevel($level)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLevel', array($level));

        return parent::setLevel($level);
    }

    /**
     * {@inheritDoc}
     */
    public function getLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLevel', array());

        return parent::getLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreateUser($createUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreateUser', array($createUser));

        return parent::setCreateUser($createUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateUser', array());

        return parent::getCreateUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreateDate($createDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreateDate', array($createDate));

        return parent::setCreateDate($createDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateDate', array());

        return parent::getCreateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifyUser($modifyUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifyUser', array($modifyUser));

        return parent::setModifyUser($modifyUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifyUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifyUser', array());

        return parent::getModifyUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifyDate($modifyDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifyDate', array($modifyDate));

        return parent::setModifyDate($modifyDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifyDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifyDate', array());

        return parent::getModifyDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getNameCreateUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameCreateUser', array());

        return parent::getNameCreateUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getNameModifyUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameModifyUser', array());

        return parent::getNameModifyUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateDateFull()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateDateFull', array());

        return parent::getCreateDateFull();
    }

    /**
     * {@inheritDoc}
     */
    public function getModifyDateFull()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifyDateFull', array());

        return parent::getModifyDateFull();
    }

}
